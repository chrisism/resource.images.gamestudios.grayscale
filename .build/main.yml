# Azure Devops Pipeline definition
# 
# Will build and release packages on Gitflow branch triggers (main, release/*).
# In build phase it will apply semver versioning with help of GitVersion (plugin needed).
# Automatically runs the texturepacker tool to compile images into xbt file. The results of 
# the build are stored in a package on Azure Devops.
# After the build phase the deployment phase follows. During this phase it will checkout the
# github repository containing a Kodi addon repository and add the new package so users can
# download it.
# There are 2 deployment phases, first one for staging where only beta/release candidates are 
# deployed. Second one is the main repository for official releases (based on master/main branch).
#
# Needed extensions:
# - GitTools / GitVersion
# - RegEx Match & Replace
#
# Needed variables (var groups in library)
# - repository.variables
#   - git_emailAddress 
#   - git_userName
#   - github_token

trigger:
- master
- release/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  isMaster: or(${{eq(variables['Build.SourceBranch'], 'refs/heads/master')}},${{eq(variables['Build.SourceBranch'], 'refs/heads/main')}})
  isReleaseCandidate: ${{startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')}}
  isHotfix: ${{startsWith(variables['Build.SourceBranch'], 'refs/heads/hotfix/')}}
  isDev: ${{eq(variables['Build.SourceBranch'], 'refs/heads/dev')}}
  workingDirectory: '$(Build.SourcesDirectory)'
  packerToolPath: '$(workingDirectory)/.build/tools/kodi-texturepacker/linux/TexturePacker'
  packerSrc: '$(workingDirectory)/media/'
  packerDest: '$(workingDirectory)/media/Textures.xbt'

stages:
- stage: Build
  displayName: Build stage
  jobs:
    - job: build
      displayName: build
        
      steps:
      - checkout: self
        submodules: true
        
      - task: gitversion/setup@0
        displayName: 'Install GitTools'
        inputs:
          versionSpec: '5.3.x'

      - task: gitversion/execute@0
        displayName: 'Executing gitversion'

      - script: |
            echo '##vso[task.setvariable variable=packageVersion]$(GitVersion.LegacySemVer)
            echo '##vso[task.setvariable variable=projectVersion]$(GitVersion.Major).$(GitVersion.Minor).$(GitVersion.Patch)
        displayName: 'Setting version variables'
        condition: not(eq(${{variables.isMaster}}, true))
        
      - script: |
            echo '##vso[task.setvariable variable=packageVersion]$(GitVersion.Major).$(GitVersion.Minor).$(GitVersion.Patch)
            echo '##vso[task.setvariable variable=projectVersion]$(GitVersion.Major).$(GitVersion.Minor).$(GitVersion.Patch)
        displayName: 'Setting version variables'
        condition: eq(${{variables.isMaster}}, true)

      - task: RegExMatchReplace@2
        displayName: 'Set addon version'
        inputs:
          PathToFile: 'addon.xml'
          RegEx: 'version="\d+\.\d+\.\d+.*" provider'
          ValueToReplace: 'version="$(packageVersion)" provider'
          
      - script: |
            $(packerToolPath) -dupecheck -input $(packerSrc) -output $(packerDest)
        displayName: 'Run texturepacker'

      - task: CopyFiles@2
        displayName: 'Copy addon files for package'
        inputs:
          SourceFolder: ''
          Contents: |
              **/*.md
              **/*.xml
              **/*.txt
              *.jpg
              *.png
              **/*.xbt
              !build/**/*.*
          TargetFolder: '$(build.artifactstagingdirectory)/resource.images.gamestudios.grayscale/'
          CleanTargetFolder: true
          flattenFolders: false
          OverWrite: true

      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: '$(build.artifactstagingdirectory)/resource.images.gamestudios.grayscale'
          includeRootFolder: true
          archiveType: 'zip'
          archiveFile: '$(build.artifactstagingdirectory)/package/resource.images.gamestudios.grayscale-$(packageVersion).zip'
          replaceExistingArchive: true
 
      - task: CopyFiles@2
        displayName: 'Copy addon files for repository'
        inputs:
          SourceFolder: '$(build.artifactstagingdirectory)/resource.images.gamestudios.grayscale/'
          Contents: |
              addon.xml
              *.jpg
              *.png
          TargetFolder: '$(build.artifactstagingdirectory)/package/'
          CleanTargetFolder: false
          flattenFolders: false
          OverWrite: true

      - script: md5sum resource.images.gamestudios.grayscale-$(packageVersion).zip > resource.images.gamestudios.grayscale-$(packageVersion).zip.md5
        workingDirectory: $(build.artifactstagingdirectory)/package/
        displayName: 'Creating md5 file for zipfile'

      - script: md5sum addon.xml > addon.xml.md5
        workingDirectory: $(build.artifactstagingdirectory)/package/
        displayName: 'Creating md5 file for addonxml'

      - task: PublishBuildArtifacts@1
        displayName: 'Publishing application as artifact'
        inputs:
          PathtoPublish: '$(build.artifactstagingdirectory)/package/'
          ArtifactName: 'resource.images.gamestudios.grayscale'
          publishLocation: 'Container'
     
- stage: DeployStaging
  displayName: Deployment on Staging
  condition: or(eq(${{variables.isReleaseCandidate}}, true),eq(${{variables.isHotfix}}, true),eq(${{variables.isMaster}}, true))
  jobs:
    - deployment: Staging
      environment: 
        name: Staging

      variables:
        - group: repository.variables
        - name: repository_url
          value: github.com/chrisism/repository.chrisism.dev.git
        - name: repository_name
          value: repository.chrisism.dev
        - name: repository_data_dir
          value: 'matrix'

      strategy:     
        runOnce:
          deploy:
            steps:
            - download: current
              displayName: 'Downloading Application artifact'
              artifact: 'resource.images.gamestudios.grayscale'

            - script: |
                git clone https://$(repository_url)
              workingDirectory: $(Pipeline.Workspace)/
              displayName: 'Clone git repository'

            - script: |
                git config user.email $(git_emailAddress)
                git config user.name $(git_userName)
              workingDirectory: $(Pipeline.Workspace)/$(repository_name)
              displayName: 'Configure git settings'

            - task: CopyFiles@2
              displayName: 'Copy addon into git repository'
              inputs:
                SourceFolder: '$(Pipeline.Workspace)/resource.images.gamestudios.grayscale'
                Contents: '**/*.*'
                TargetFolder: '$(Pipeline.Workspace)/$(repository_name)/$(repository_data_dir)/resource.images.gamestudios.grayscale'
                CleanTargetFolder: false
                flattenFolders: false
                OverWrite: true

            - task: PythonScript@0
              displayName: 'Merge addon xml files for repository'
              inputs:
                scriptSource: 'inline'
                arguments: '$(Pipeline.Workspace)/$(repository_name)/$(repository_data_dir)/addons.xml $(Pipeline.Workspace)/$(repository_name)/$(repository_data_dir)/resource.images.gamestudios.grayscale/addon.xml'
                script: |
                  import sys
                  from xml.etree import ElementTree

                  file_combined = sys.argv[1]
                  file_source = sys.argv[2]

                  addons_xml    = ElementTree.parse(file_combined)
                  addons        = addons_xml.getroot()
                  addon_in      = ElementTree.parse(file_source).getroot()

                  nodes = addons.findall("addon[@id='resource.images.gamestudios.grayscale']")

                  for addon_node in nodes:
                      addons.remove(addon_node)

                  addons.append(addon_in)
                  addons_xml.write(file_combined)
                workingDirectory: '$(Pipeline.Workspace)/$(repository_name)/$(repository_data_dir)/'
                
            - script: md5sum addons.xml > addons.xml.md5
              workingDirectory: $(Pipeline.Workspace)/$(repository_name)/$(repository_data_dir)/
              displayName: 'Creating md5 file for addons.xml'

            - script: |
                git add .
                git commit -m "$(Build.DefinitionName) Release $(Build.BuildNumber)"
              workingDirectory: $(Pipeline.Workspace)/$(repository_name)/
              displayName: 'Git - Add and commit'    

            - script: |
                git push https://$(github_token)@$(repository_url) main 
              workingDirectory: $(Pipeline.Workspace)/$(repository_name)/
              displayName: 'Git - Push'    

- stage: DeployProd
  displayName: Deployment on Production
  condition: eq(${{variables.isMaster}}, true)
  jobs:
    - deployment: Production
      environment: 
        name: Production

      variables:
        - group: repository.variables
        - name: repository_url
          value: github.com/chrisism/repository.chrisism.git
        - name: repository_name
          value: repository.chrisism
        - name: repository_data_dir
          value: 'matrix'

      strategy:     
        runOnce:
          deploy:
            steps:
            - download: current
              displayName: 'Downloading Application artifact'
              artifact: 'resource.images.gamestudios.grayscale'

            - script: |
                git clone https://$(repository_url)
              workingDirectory: $(Pipeline.Workspace)/
              displayName: 'Clone git repository'

            - script: |
                git config user.email $(git_emailAddress)
                git config user.name $(git_userName)
              workingDirectory: $(Pipeline.Workspace)/$(repository_name)
              displayName: 'Configure git settings'

            - task: CopyFiles@2
              displayName: 'Copy addon into git repository'
              inputs:
                SourceFolder: '$(Pipeline.Workspace)/resource.images.gamestudios.grayscale'
                Contents: '**/*.*'
                TargetFolder: '$(Pipeline.Workspace)/$(repository_name)/$(repository_data_dir)/resource.images.gamestudios.grayscale'
                CleanTargetFolder: false
                flattenFolders: false
                OverWrite: true

            - task: PythonScript@0
              displayName: 'Merge addon xml files for repository'
              inputs:
                scriptSource: 'inline'
                arguments: '$(Pipeline.Workspace)/$(repository_name)/$(repository_data_dir)/addons.xml $(Pipeline.Workspace)/$(repository_name)/$(repository_data_dir)/resource.images.gamestudios.grayscale/addon.xml'
                script: |
                  import sys
                  from xml.etree import ElementTree

                  file_combined = sys.argv[1]
                  file_source = sys.argv[2]

                  addons_xml    = ElementTree.parse(file_combined)
                  addons        = addons_xml.getroot()
                  addon_in      = ElementTree.parse(file_source).getroot()

                  nodes = addons.findall("addon[@id='resource.images.gamestudios.grayscale']")

                  for addon_node in nodes:
                      addons.remove(addon_node)

                  addons.append(addon_in)
                  addons_xml.write(file_combined)
                workingDirectory: '$(Pipeline.Workspace)/$(repository_name)/$(repository_data_dir)/'
                
            - script: md5sum addons.xml > addons.xml.md5
              workingDirectory: $(Pipeline.Workspace)/$(repository_name)/$(repository_data_dir)/
              displayName: 'Creating md5 file for addons.xml'

            - script: |
                git add .
                git commit -m "$(Build.DefinitionName) Release $(Build.BuildNumber)"
              workingDirectory: $(Pipeline.Workspace)/$(repository_name)/
              displayName: 'Git - Add and commit'    

            - script: |
                git push https://$(github_token)@$(repository_url) main 
              workingDirectory: $(Pipeline.Workspace)/$(repository_name)/
              displayName: 'Git - Push'    